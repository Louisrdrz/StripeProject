-- ========================================
-- üîç SCRIPT DE DIAGNOSTIC SUPABASE POUR STRIPE
-- ========================================
-- Ex√©cutez ce script dans Supabase SQL Editor pour v√©rifier votre configuration

-- ========================================
-- 1Ô∏è‚É£ V√©rifier si la table subscriptions existe
-- ========================================
SELECT 
  EXISTS (
    SELECT FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name = 'subscriptions'
  ) AS table_exists;

-- Si retourne "true" ‚úÖ : La table existe
-- Si retourne "false" ‚ùå : La table n'existe pas, il faut la cr√©er

-- ========================================
-- 2Ô∏è‚É£ V√©rifier les colonnes de la table subscriptions
-- ========================================
SELECT 
  column_name,
  data_type,
  column_default,
  is_nullable
FROM information_schema.columns
WHERE table_schema = 'public' 
AND table_name = 'subscriptions'
ORDER BY ordinal_position;

-- ‚úÖ Vous devriez voir 12 colonnes :
-- id, user_id, stripe_customer_id, stripe_subscription_id, stripe_price_id,
-- status, current_period_start, current_period_end, quota_limit, quota_used,
-- created_at, updated_at

-- ========================================
-- 3Ô∏è‚É£ V√©rifier les index
-- ========================================
SELECT 
  indexname,
  indexdef
FROM pg_indexes
WHERE schemaname = 'public' 
AND tablename = 'subscriptions';

-- ‚úÖ Vous devriez voir au minimum :
-- - subscriptions_pkey (index primaire sur id)
-- - idx_subscriptions_user_id
-- - idx_subscriptions_stripe_customer_id
-- - idx_subscriptions_stripe_subscription_id

-- ========================================
-- 4Ô∏è‚É£ V√©rifier si RLS est activ√©
-- ========================================
SELECT 
  tablename,
  rowsecurity
FROM pg_tables
WHERE schemaname = 'public' 
AND tablename = 'subscriptions';

-- ‚úÖ rowsecurity doit √™tre "true"

-- ========================================
-- 5Ô∏è‚É£ V√©rifier les RLS Policies
-- ========================================
SELECT 
  policyname,
  cmd,
  qual,
  with_check
FROM pg_policies
WHERE schemaname = 'public' 
AND tablename = 'subscriptions';

-- ‚úÖ Vous devriez voir au moins :
-- - "Users can view own subscription" (cmd: SELECT)
-- - Policies pour INSERT/UPDATE/DELETE avec service_role

-- ========================================
-- 6Ô∏è‚É£ V√©rifier les contraintes (foreign keys, unique)
-- ========================================
SELECT
  con.conname AS constraint_name,
  con.contype AS constraint_type,
  CASE con.contype
    WHEN 'f' THEN 'FOREIGN KEY'
    WHEN 'p' THEN 'PRIMARY KEY'
    WHEN 'u' THEN 'UNIQUE'
    WHEN 'c' THEN 'CHECK'
    ELSE con.contype::text
  END AS constraint_description
FROM pg_constraint con
JOIN pg_class rel ON rel.oid = con.conrelid
WHERE rel.relname = 'subscriptions';

-- ‚úÖ Vous devriez voir :
-- - PRIMARY KEY sur id
-- - FOREIGN KEY sur user_id ‚Üí auth.users(id)
-- - UNIQUE sur stripe_customer_id
-- - UNIQUE sur stripe_subscription_id

-- ========================================
-- 7Ô∏è‚É£ Compter les abonnements existants
-- ========================================
SELECT 
  COUNT(*) AS total_subscriptions,
  COUNT(DISTINCT user_id) AS total_users,
  COUNT(CASE WHEN status = 'active' THEN 1 END) AS active_subscriptions,
  COUNT(CASE WHEN status = 'canceled' THEN 1 END) AS canceled_subscriptions
FROM subscriptions;

-- ========================================
-- 8Ô∏è‚É£ Afficher les abonnements (si il y en a)
-- ========================================
SELECT 
  id,
  user_id,
  stripe_customer_id,
  stripe_subscription_id,
  status,
  quota_limit,
  quota_used,
  created_at
FROM subscriptions
ORDER BY created_at DESC
LIMIT 5;

-- ========================================
-- ‚úÖ R√âSUM√â DIAGNOSTIC
-- ========================================
-- Ex√©cutez toutes ces requ√™tes une par une et notez les r√©sultats.
-- Si une requ√™te retourne une erreur ou un r√©sultat vide, cela indique un probl√®me.

-- Si la table n'existe pas du tout, ex√©cutez le fichier SQL de cr√©ation :
-- Voir le fichier VERIFIER_SUPABASE_STRIPE.md section 6

-- ========================================
-- üîß CORRECTION RAPIDE (si besoin)
-- ========================================

-- Si la table n'existe pas, d√©commentez et ex√©cutez tout le bloc ci-dessous :

/*
CREATE TABLE subscriptions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  stripe_customer_id TEXT UNIQUE,
  stripe_subscription_id TEXT UNIQUE,
  stripe_price_id TEXT,
  status TEXT,
  current_period_start TIMESTAMP,
  current_period_end TIMESTAMP,
  quota_limit INTEGER DEFAULT 50,
  quota_used INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE INDEX idx_subscriptions_user_id ON subscriptions(user_id);
CREATE INDEX idx_subscriptions_stripe_customer_id ON subscriptions(stripe_customer_id);
CREATE INDEX idx_subscriptions_stripe_subscription_id ON subscriptions(stripe_subscription_id);

ALTER TABLE subscriptions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own subscription"
ON subscriptions FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Service role can insert subscriptions"
ON subscriptions FOR INSERT
WITH CHECK (true);

CREATE POLICY "Service role can update subscriptions"
ON subscriptions FOR UPDATE
USING (true);

CREATE POLICY "Service role can delete subscriptions"
ON subscriptions FOR DELETE
USING (true);
*/

-- ========================================
-- FIN DU DIAGNOSTIC
-- ========================================

